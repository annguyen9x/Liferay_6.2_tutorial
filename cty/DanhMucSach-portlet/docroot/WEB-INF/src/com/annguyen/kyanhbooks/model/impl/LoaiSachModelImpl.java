/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.annguyen.kyanhbooks.model.impl;

import com.annguyen.kyanhbooks.model.LoaiSach;
import com.annguyen.kyanhbooks.model.LoaiSachModel;
import com.annguyen.kyanhbooks.model.LoaiSachSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LoaiSach service. Represents a row in the &quot;LoaiSach&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.annguyen.kyanhbooks.model.LoaiSachModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LoaiSachImpl}.
 * </p>
 *
 * @author AnNguyen
 * @see LoaiSachImpl
 * @see com.annguyen.kyanhbooks.model.LoaiSach
 * @see com.annguyen.kyanhbooks.model.LoaiSachModel
 * @generated
 */
@JSON(strict = true)
public class LoaiSachModelImpl extends BaseModelImpl<LoaiSach>
	implements LoaiSachModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a loai sach model instance should use the {@link com.annguyen.kyanhbooks.model.LoaiSach} interface instead.
	 */
	public static final String TABLE_NAME = "LoaiSach";
	public static final Object[][] TABLE_COLUMNS = {
			{ "MaLoaiSach", Types.VARCHAR },
			{ "TenLoaiSach", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table LoaiSach (MaLoaiSach VARCHAR(75) not null primary key,TenLoaiSach VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table LoaiSach";
	public static final String ORDER_BY_JPQL = " ORDER BY loaiSach.TenLoaiSach ASC";
	public static final String ORDER_BY_SQL = " ORDER BY LoaiSach.TenLoaiSach ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.annguyen.kyanhbooks.model.LoaiSach"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.annguyen.kyanhbooks.model.LoaiSach"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LoaiSach toModel(LoaiSachSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LoaiSach model = new LoaiSachImpl();

		model.setMaLoaiSach(soapModel.getMaLoaiSach());
		model.setTenLoaiSach(soapModel.getTenLoaiSach());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LoaiSach> toModels(LoaiSachSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LoaiSach> models = new ArrayList<LoaiSach>(soapModels.length);

		for (LoaiSachSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.annguyen.kyanhbooks.model.LoaiSach"));

	public LoaiSachModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _MaLoaiSach;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setMaLoaiSach(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _MaLoaiSach;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return LoaiSach.class;
	}

	@Override
	public String getModelClassName() {
		return LoaiSach.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("MaLoaiSach", getMaLoaiSach());
		attributes.put("TenLoaiSach", getTenLoaiSach());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String MaLoaiSach = (String)attributes.get("MaLoaiSach");

		if (MaLoaiSach != null) {
			setMaLoaiSach(MaLoaiSach);
		}

		String TenLoaiSach = (String)attributes.get("TenLoaiSach");

		if (TenLoaiSach != null) {
			setTenLoaiSach(TenLoaiSach);
		}
	}

	@JSON
	@Override
	public String getMaLoaiSach() {
		if (_MaLoaiSach == null) {
			return StringPool.BLANK;
		}
		else {
			return _MaLoaiSach;
		}
	}

	@Override
	public void setMaLoaiSach(String MaLoaiSach) {
		_MaLoaiSach = MaLoaiSach;
	}

	@JSON
	@Override
	public String getTenLoaiSach() {
		if (_TenLoaiSach == null) {
			return StringPool.BLANK;
		}
		else {
			return _TenLoaiSach;
		}
	}

	@Override
	public void setTenLoaiSach(String TenLoaiSach) {
		_TenLoaiSach = TenLoaiSach;
	}

	@Override
	public LoaiSach toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LoaiSach)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LoaiSachImpl loaiSachImpl = new LoaiSachImpl();

		loaiSachImpl.setMaLoaiSach(getMaLoaiSach());
		loaiSachImpl.setTenLoaiSach(getTenLoaiSach());

		loaiSachImpl.resetOriginalValues();

		return loaiSachImpl;
	}

	@Override
	public int compareTo(LoaiSach loaiSach) {
		int value = 0;

		value = getTenLoaiSach().compareTo(loaiSach.getTenLoaiSach());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LoaiSach)) {
			return false;
		}

		LoaiSach loaiSach = (LoaiSach)obj;

		String primaryKey = loaiSach.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LoaiSach> toCacheModel() {
		LoaiSachCacheModel loaiSachCacheModel = new LoaiSachCacheModel();

		loaiSachCacheModel.MaLoaiSach = getMaLoaiSach();

		String MaLoaiSach = loaiSachCacheModel.MaLoaiSach;

		if ((MaLoaiSach != null) && (MaLoaiSach.length() == 0)) {
			loaiSachCacheModel.MaLoaiSach = null;
		}

		loaiSachCacheModel.TenLoaiSach = getTenLoaiSach();

		String TenLoaiSach = loaiSachCacheModel.TenLoaiSach;

		if ((TenLoaiSach != null) && (TenLoaiSach.length() == 0)) {
			loaiSachCacheModel.TenLoaiSach = null;
		}

		return loaiSachCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{MaLoaiSach=");
		sb.append(getMaLoaiSach());
		sb.append(", TenLoaiSach=");
		sb.append(getTenLoaiSach());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.annguyen.kyanhbooks.model.LoaiSach");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>MaLoaiSach</column-name><column-value><![CDATA[");
		sb.append(getMaLoaiSach());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TenLoaiSach</column-name><column-value><![CDATA[");
		sb.append(getTenLoaiSach());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LoaiSach.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LoaiSach.class
		};
	private String _MaLoaiSach;
	private String _TenLoaiSach;
	private LoaiSach _escapedModel;
}